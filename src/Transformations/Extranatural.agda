open import Level
open import Categories.Core using (Category)

module Transformations.Extranatural
  {oРѓЂ mРѓЂ eРѓЂ oРѓѓ mРѓѓ eРѓѓ oРѓЃ mРѓЃ eРѓЃ oРѓё mРѓё eРѓё : Level}
  {­Юљ┤ : Category oРѓЂ mРѓЂ eРѓЂ}
  {­Юљх : Category oРѓѓ mРѓѓ eРѓѓ}
  {­ЮљХ : Category oРѓЃ mРѓЃ eРѓЃ}
  {­Юљи : Category oРѓё mРѓё eРѓё}
  where

open import Categories.Product public
open import Functors.Core using (Functor) public

record ExtranaturalTransformation
  (F : Functor (­Юљ┤ ├Ќ ­Юљх ├Ќ ­Юљх рхњрхќ) ­Юљи)
  (G : Functor (­Юљ┤ ├Ќ ­ЮљХ ├Ќ ­ЮљХ рхњрхќ) ­Юљи)
  {a : Obj ­Юљ┤} {b : Obj ­Юљх} {c : Obj ­ЮљХ}
  : Set (oРѓЂ Ріћ mРѓЂ Ріћ oРѓѓ Ріћ mРѓѓ Ріћ oРѓЃ Ріћ mРѓЃ Ріћ mРѓё Ріћ eРѓё) where
  open Category ­Юљи using (_РЄњ_)
  open Functor F using (FРѓњ; FРѓў)
  open Functor G renaming (FРѓњ to GРѓњ; FРѓў to GРѓў)
  field
    ╬▒РЪеa,b,cРЪЕ : FРѓњ (a , b , b) РЄњ GРѓњ (a , c , c)
    nat-a :
      {aРђ▓ : Obj ­Юљ┤} {f : ­Юљ┤ [ a , aРђ▓ ]} {╬▒РЪеaРђ▓,b,cРЪЕ : FРѓњ (aРђ▓ , b , b) РЄњ GРѓњ (aРђ▓ , c , c)}
      Рєњ ­Юљи [ ╬▒РЪеaРђ▓,b,cРЪЕ Рѕў FРѓў (f , id ­Юљх , id (­Юљх рхњрхќ)) РЅѕ GРѓў (f , id ­ЮљХ , id (­ЮљХ рхњрхќ)) Рѕў ╬▒РЪеa,b,cРЪЕ ]
    extra-b :
      {bРђ▓ : Obj ­Юљх} {g : ­Юљх [ b , bРђ▓ ]} {╬▒РЪеa,bРђ▓,cРЪЕ : FРѓњ (a , bРђ▓ , bРђ▓) РЄњ GРѓњ (a , c , c)}
      Рєњ ­Юљи [ ╬▒РЪеa,b,cРЪЕ Рѕў FРѓў (id ­Юљ┤ , id ­Юљх , g) РЅѕ ╬▒РЪеa,bРђ▓,cРЪЕ Рѕў FРѓў (id ­Юљ┤ , g , id (­Юљх рхњрхќ)) ]
    extra-c :
      {cРђ▓ : Obj ­ЮљХ} {h : ­ЮљХ [ c , cРђ▓ ]} {╬▒РЪеa,b,cРђ▓РЪЕ : FРѓњ (a , b , b) РЄњ GРѓњ (a , cРђ▓ , cРђ▓)}
      Рєњ ­Юљи [ GРѓў (id ­Юљ┤ , h , id (­ЮљХ рхњрхќ) ) Рѕў ╬▒РЪеa,b,cРЪЕ РЅѕ GРѓў (id ­Юљ┤ , id ­ЮљХ , h) Рѕў ╬▒РЪеa,b,cРђ▓РЪЕ ]

syntax ExtranaturalTransformation F G = F ExРЄњ G
